#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QDebug>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow) //–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
{
    db_connect();
    ui->setupUi(this);

    //–ö–∞—Ä—Ç–∏–Ω–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    QPixmap bkgnd(":/new/image/src/main_window.jpg");
    bkgnd = bkgnd.scaled(size(), Qt::IgnoreAspectRatio, Qt::SmoothTransformation);
    QPalette palette;
    palette.setBrush(QPalette::Window, bkgnd);
    this->setPalette(palette);
    //–ò–∫–æ–Ω–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    QIcon icon(":/new/image/src/icon_main.jpg");
    this->setWindowIcon(icon);
    //–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ú–æ—Å–∫–≤—ã
    QImage image1(":/new/image/src/moscow.jpg");
    QPixmap pixmap1 = QPixmap::fromImage(image1);
    ui -> label_moscow -> setPixmap(pixmap1);
    ui -> label_moscow -> setScaledContents(true);
    //–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–≤–µ—á–µ–∫
    QImage image(":/new/image/src/books.jpg");
    QPixmap pixmap = QPixmap::fromImage(image);
    ui -> label_books -> setPixmap(pixmap);
    ui -> label_books -> setScaledContents(true);

    on_pushButton_all_clicked();

    QStringList suggestions {"–ò–¥–∏–æ—Ç", "–ò–≥—Ä–æ–∫", "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–ë–µ–ª–∞—è –≥–≤–∞—Ä–¥–∏—è", "–ë—Ä–∞—Ç—å—è –ö–∞—Ä–∞–º–∞–∑–æ–≤—ã", "–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –∏ –ø–æ—ç–º—ã", "–õ–∏—Ä–∏–∫–∞", "–ß–µ—Ä–Ω—ã–π —á–µ–ª–æ–≤–µ–∫"};

    QStringListModel* model = new QStringListModel(suggestions);// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    QCompleter* completer = new QCompleter(model, this); // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ QCompleter –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –µ–º—É –º–æ–¥–µ–ª–∏
    ui -> lineEdit_nameBook -> setCompleter(completer);// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–ª–∏—Ç–µ—Ä–∞ –¥–ª—è –Ω–∞—à–µ–≥–æ LineEdit

    ui -> pushButton_allRent -> hide();
    ui -> pushButton_allUser -> hide();
}

MainWindow::~MainWindow() //–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
{
    db.close();
    delete dlg;
    delete ui;
}

void MainWindow::db_connect() //–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö
{
    db = QSqlDatabase::addDatabase("QPSQL");

    db.setDatabaseName("postgres");
    db.setHostName("localhost");
    db.setPassword("1234");
    db.setPort(5432);
    db.setUserName("postgres");
    if(!db.open()) {
        QMessageBox::critical(this,"–í—Å–µ –ø–ª–æ—Ö–æ","–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î");
    }
}

void MainWindow::receiveMail(const QString &mail) //–ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
{
    if(!user.admin) {
        QSqlQuery query(db);
        query.prepare("SELECT name, familia, city, client_id FROM client WHERE mail = :mail");
        query.bindValue(":mail", mail);

        if (!query.exec()) {
            QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã.");
            return;
        }
        if (query.next()) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
            user.name = query.value(0).toString();
            user.familia = query.value(1).toString();
            user.city = query.value(2).toString();
            user.client_id = query.value(3).toString();
            user.mail = mail;

            ui->lineEdit_name->setText(user.name);
            ui->lineEdit_familia->setText(user.familia);
        }
    } else {
        user.name = "admin";
        user.familia = "admin";
        user.mail = mail;

        ui->lineEdit_name->setText(user.name);
        ui->lineEdit_familia->setText(user.familia);
    }

}

void MainWindow::receiveAdmin(bool ad) //–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
{
    user.admin = ad;
    ui -> pushButton_allRent -> show();
    ui -> pushButton_allUser -> show();
    ui -> pushButton_best -> hide();
    ui -> pushButton_rent -> hide();
    on_pushButton_all_clicked();
}

void MainWindow::on_pushButton_all_clicked() //–≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∫–Ω–∏–≥–∏
{
    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö
    ui -> tableWidget ->clear();
    ui->tableWidget->setRowCount(0);
    ui->tableWidget->setColumnCount(0);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'book'
    QSqlQuery query;
    query.prepare("SELECT book_id, title AS –ù–∞–∑–≤–∞–Ω–∏–µ, genre AS –ñ–∞–Ω—Ä, name_author AS –ê–≤—Ç–æ—Ä, count AS –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ FROM book JOIN author ON book.author_id = author.author_id WHERE count > 0 ORDER BY book_id ASC");
    if (!query.exec()) {
        qDebug() << "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:" << query.lastError().text();
        return;
    }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
    int columnCount = query.record().count();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    QStringList headers;
    for (int i = 0; i < columnCount; ++i) {
        headers.append(query.record().fieldName(i));
    }

    if(user.admin) {
        ui -> tableWidget ->setColumnCount(columnCount);
    } else {
        headers.append("");
        headers.append("");
        ui -> tableWidget ->setColumnCount(columnCount+2);
    }
    ui -> tableWidget ->setHorizontalHeaderLabels(headers);


            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
    int rowIndex = 0;
    while (query.next()) {
        ui -> tableWidget ->insertRow(rowIndex);
        for (int colIndex = 0; colIndex < columnCount; ++colIndex) {
            QVariant value = query.value(colIndex);
            QTableWidgetItem *twi = new QTableWidgetItem();
            twi -> setText(value.toString());
            twi->setFlags(twi->flags()&0xfffffffd);
            ui -> tableWidget ->setItem(rowIndex, colIndex, twi);
        }
        if(!user.admin) {
            QPushButton *buy = new QPushButton();
            buy -> setText("–í–∑—è—Ç—å");
            buy -> setProperty("row", rowIndex);
            connect(buy, SIGNAL(clicked()), this, SLOT(buy_click()));
            ui -> tableWidget ->setCellWidget(rowIndex, columnCount, buy);

            QPushButton *like = new QPushButton();
            like -> setText("ü©∑");
            like -> setProperty("row", rowIndex);
            connect(like, SIGNAL(clicked()), this, SLOT(like_click()));
            ui -> tableWidget ->setCellWidget(rowIndex, columnCount+1, like);
        }
        rowIndex++;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    ui -> tableWidget ->resizeColumnsToContents();
    ui -> tableWidget -> horizontalHeader() -> setSectionResizeMode(QHeaderView::Stretch); //—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
}


void MainWindow::buy_click() //–≤–∑—è—Ç—å –∫–Ω–∏–≥—É
{
    QPushButton * pb = qobject_cast<QPushButton *>(sender());
    if (pb != nullptr) {
        int row = pb->property("row").toInt();

        QString book_id = ui -> tableWidget -> item(row, 0) -> text();

        QSqlQuery checkQuery;
        checkQuery.prepare("SELECT COUNT(*) FROM buy_book WHERE client_id = :client_id AND book_id = :book_id");
        checkQuery.bindValue(":client_id", user.client_id);
        checkQuery.bindValue(":book_id", book_id);

        if (!checkQuery.exec()) {
            qDebug() << "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:" << checkQuery.lastError().text();
            return;
        }

        if (checkQuery.next() && checkQuery.value(0).toInt() > 0) {
            QMessageBox::warning(this, "–û—à–∏–±–∫–∞!","–≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ —É –í–∞—Å –Ω–∞ —Ä—É–∫–∞—Ö.");
            return;
        } else {
            QSqlQuery insertQuery(db);
            insertQuery.prepare("INSERT INTO buy_book (client_id, book_id) VALUES (:client_id, :book_id)");
            insertQuery.bindValue(":client_id", user.client_id);
            insertQuery.bindValue(":book_id", book_id);

            if (!insertQuery.exec()) {
                QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î: " + insertQuery.lastError().text());
                return;
            }

            QSqlQuery updateQuery(db);
            updateQuery.prepare("UPDATE book SET count = count - 1 WHERE book_id = :book_id");
            updateQuery.bindValue(":book_id", book_id);

            if (!updateQuery.exec()) {
                QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î: " + updateQuery.lastError().text());
                return;
            }
        }

        int up = ui -> tableWidget -> item(row, ui -> tableWidget -> columnCount()-3) -> text().toInt();
        ui -> tableWidget -> item(row, ui -> tableWidget -> columnCount()-3) -> setText(QString::number(up-1));
        ui -> tableWidget -> horizontalHeader() -> setSectionResizeMode(QHeaderView::Stretch); //—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    }
}

void MainWindow::rebuy_click()  //–≤–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É
{
    QPushButton * pb = qobject_cast<QPushButton *>(sender());
    int row = pb->property("row").toInt();

    QString book_id = ui -> tableWidget -> item(row, 0) -> text();

    QSqlQuery deleteQuery(db);
    deleteQuery.prepare("DELETE FROM buy_book WHERE book_id = :book_id AND client_id = :client_id");
    deleteQuery.bindValue(":book_id", book_id);
    deleteQuery.bindValue(":client_id", user.client_id);

    if (!deleteQuery.exec()) {
        qDebug() << "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏:" << deleteQuery.lastError().text();
    } else {
        qDebug() << "–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.";
        QSqlQuery updateQuery(db);
        updateQuery.prepare("UPDATE book SET count = count + 1 WHERE book_id = :book_id");
        updateQuery.bindValue(":book_id", book_id);

        if (!updateQuery.exec()) {
            QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î: " + updateQuery.lastError().text());
            return;
        }
        on_pushButton_rent_clicked();
    }
}


void MainWindow::like_click() //–¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É –≤ –ª—é–±–∏–º—ã–µ
{
    QPushButton * pb = qobject_cast<QPushButton *>(sender());
    if (pb != nullptr) {
        int row = pb->property("row").toInt();

        QString book_id = ui -> tableWidget -> item(row, 0) -> text();

        QSqlQuery checkQuery;
        checkQuery.prepare("SELECT COUNT(*) FROM best WHERE client_id = :client_id AND book_id = :book_id");
        checkQuery.bindValue(":client_id", user.client_id);
        checkQuery.bindValue(":book_id", book_id);

        if (!checkQuery.exec()) {
            qDebug() << "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:" << checkQuery.lastError().text();
            return;
        }

        if (checkQuery.next() && checkQuery.value(0).toInt() > 0) {
            QMessageBox::warning(this, "–û—à–∏–±–∫–∞!","–≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ —É –í–∞—Å –≤ –ª—é–±–∏–º—ã—Ö.");
        } else {
            QSqlQuery insertQuery(db);
            insertQuery.prepare("INSERT INTO best (client_id, book_id) VALUES (:client_id, :book_id)");
            insertQuery.bindValue(":client_id", user.client_id);
            insertQuery.bindValue(":book_id", book_id);

            if (!insertQuery.exec()) {
                QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î: " + insertQuery.lastError().text());
                return;
            }
        }
    }
}

void MainWindow::dislike_click() //—É–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É –∏–∑ –ª—é–±–∏–º—ã—Ö
{
    QPushButton * pb = qobject_cast<QPushButton *>(sender());
    int row = pb->property("row").toInt();

    QString book_id = ui -> tableWidget -> item(row, 0) -> text();

    QSqlQuery deleteQuery(db);
    deleteQuery.prepare("DELETE FROM best WHERE book_id = :book_id AND client_id = :client_id");
    deleteQuery.bindValue(":book_id", book_id);
    deleteQuery.bindValue(":client_id", user.client_id);

    if (!deleteQuery.exec()) {
        qDebug() << "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏:" << deleteQuery.lastError().text();
    } else {
        qDebug() << "–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.";
        on_pushButton_best_clicked();
    }
}


void MainWindow::on_pushButton_best_clicked() //–ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
{
    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö
    ui -> tableWidget ->clear();
    ui->tableWidget->setRowCount(0);
    ui->tableWidget->setColumnCount(0);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'book'
    QSqlQuery query;
    query.prepare("SELECT book.book_id, title AS –ù–∞–∑–≤–∞–Ω–∏–µ, genre AS –ñ–∞–Ω—Ä, name_author AS –ê–≤—Ç–æ—Ä, count AS –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ FROM book JOIN author ON book.author_id = author.author_id JOIN best ON best.book_id = book.book_id WHERE best.client_id = :client_id");
    query.bindValue(":client_id", user.client_id);

    if (!query.exec()) {
        qDebug() << "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:" << query.lastError().text();
        return;
    }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
    int columnCount = query.record().count();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    QStringList headers;
    for (int i = 0; i < columnCount; ++i) {
        headers.append(query.record().fieldName(i));
    }
    headers.append("");
    headers.append("");

    ui -> tableWidget ->setColumnCount(columnCount+2);
    ui -> tableWidget ->setHorizontalHeaderLabels(headers);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
    int rowIndex = 0;
    while (query.next()) {
        ui -> tableWidget ->insertRow(rowIndex);
        for (int colIndex = 0; colIndex < columnCount; ++colIndex) {
            QVariant value = query.value(colIndex);
            QTableWidgetItem *twi = new QTableWidgetItem();
            twi -> setText(value.toString());
            twi->setFlags(twi->flags()&0xfffffffd);
            ui -> tableWidget ->setItem(rowIndex, colIndex, twi);
        }
        QPushButton *buy = new QPushButton();
        buy -> setText("–í–∑—è—Ç—å");
        buy -> setProperty("row", rowIndex);
        connect(buy, SIGNAL(clicked()), this, SLOT(buy_click()));
        ui -> tableWidget ->setCellWidget(rowIndex, columnCount, buy);

        QPushButton *dislike = new QPushButton();
        dislike -> setText("üíî");
        dislike -> setProperty("row", rowIndex);
        connect(dislike, SIGNAL(clicked()), this, SLOT(dislike_click()));
        ui -> tableWidget ->setCellWidget(rowIndex, columnCount+1, dislike);
        rowIndex++;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    ui -> tableWidget ->resizeColumnsToContents();
    ui -> tableWidget -> horizontalHeader() -> setSectionResizeMode(QHeaderView::Stretch); //—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
}

void MainWindow::on_pushButton_rent_clicked() //–ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ –Ω–∞ —Ä—É–∫–∞—Ö
{
    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö
    ui -> tableWidget ->clear();
    ui->tableWidget->setRowCount(0);
    ui->tableWidget->setColumnCount(0);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'book'
    QSqlQuery query;
    query.prepare("SELECT book.book_id, title AS –ù–∞–∑–≤–∞–Ω–∏–µ, genre AS –ñ–∞–Ω—Ä, name_author AS –ê–≤—Ç–æ—Ä FROM book  JOIN author ON book.author_id = author.author_id JOIN buy_book ON buy_book.book_id = book.book_id WHERE buy_book.client_id = :client_id");
    query.bindValue(":client_id", user.client_id);

    if (!query.exec()) {
        qDebug() << "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:" << query.lastError().text();
        return;
    }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
    int columnCount = query.record().count();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    QStringList headers;
    for (int i = 0; i < columnCount; ++i) {
        headers.append(query.record().fieldName(i));
    }
    headers.append("");

    ui -> tableWidget ->setColumnCount(columnCount+1);
    ui -> tableWidget ->setHorizontalHeaderLabels(headers);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
    int rowIndex = 0;
    while (query.next()) {
        ui -> tableWidget ->insertRow(rowIndex);
        for (int colIndex = 0; colIndex < columnCount; ++colIndex) {
            QVariant value = query.value(colIndex);
            QTableWidgetItem *twi = new QTableWidgetItem();
            twi -> setText(value.toString());
            twi->setFlags(twi->flags()&0xfffffffd);
            ui -> tableWidget ->setItem(rowIndex, colIndex, twi);
        }
        QPushButton *buy = new QPushButton();
        buy -> setText("–í–µ—Ä–Ω—É—Ç—å");
        buy -> setProperty("row", rowIndex);
        connect(buy, SIGNAL(clicked()), this, SLOT(rebuy_click()));
        ui -> tableWidget ->setCellWidget(rowIndex, columnCount, buy);
        rowIndex++;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    ui -> tableWidget ->resizeColumnsToContents();
    ui -> tableWidget -> horizontalHeader() -> setSectionResizeMode(QHeaderView::Stretch); //—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
}

void MainWindow::on_pushButton_search_clicked() //–ø–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
{
    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö
    ui -> tableWidget ->clear();
    ui->tableWidget->setRowCount(0);
    ui->tableWidget->setColumnCount(0);

    QString nameBook = ui -> lineEdit_nameBook -> text();

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'book'
    QSqlQuery query;
    query.prepare("SELECT book_id, title AS –ù–∞–∑–≤–∞–Ω–∏–µ, genre AS –ñ–∞–Ω—Ä, name_author AS –ê–≤—Ç–æ—Ä, count AS –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ FROM book JOIN author ON book.author_id = author.author_id WHERE count > 0 AND title = :nameBook ORDER BY book_id ASC");
    query.bindValue(":nameBook", nameBook);
    if (!query.exec()) {
        qDebug() << "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:" << query.lastError().text();
        return;
    }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
    int columnCount = query.record().count();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    QStringList headers;
    for (int i = 0; i < columnCount; ++i) {
        headers.append(query.record().fieldName(i));
    }
    headers.append("");
    headers.append("");
    ui -> tableWidget ->setColumnCount(columnCount+2);
    ui -> tableWidget ->setHorizontalHeaderLabels(headers);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
    int rowIndex = 0;
    while (query.next()) {
        ui -> tableWidget ->insertRow(rowIndex);
        for (int colIndex = 0; colIndex < columnCount; ++colIndex) {
            QVariant value = query.value(colIndex);
            QTableWidgetItem *twi = new QTableWidgetItem();
            twi -> setText(value.toString());
            twi->setFlags(twi->flags()&0xfffffffd);
            ui -> tableWidget ->setItem(rowIndex, colIndex, twi);
        }
        QPushButton *buy = new QPushButton();
        buy -> setText("–í–∑—è—Ç—å");
        buy -> setProperty("row", rowIndex);
        connect(buy, SIGNAL(clicked()), this, SLOT(buy_click()));
        ui -> tableWidget ->setCellWidget(rowIndex, columnCount, buy);

        QPushButton *like = new QPushButton();
        like -> setText("ü©∑");
        like -> setProperty("row", rowIndex);
        connect(like, SIGNAL(clicked()), this, SLOT(like_click()));
        ui -> tableWidget ->setCellWidget(rowIndex, columnCount+1, like);
        rowIndex++;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    ui -> tableWidget ->resizeColumnsToContents();
}

void MainWindow::on_pushButton_filter_clicked() //–ø–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
{
    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö
    ui -> tableWidget ->clear();
    ui->tableWidget->setRowCount(0);
    ui->tableWidget->setColumnCount(0);

    QString nameAuthor = ui -> comboBox_nameAuthor -> currentText();
    QString nameGenre = ui -> comboBox_nameGenre -> currentText();

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'book'
    QSqlQuery query;
    if(nameAuthor == "" and nameGenre == "") {
        query.prepare("SELECT book_id, title AS –ù–∞–∑–≤–∞–Ω–∏–µ, genre AS –ñ–∞–Ω—Ä, name_author AS –ê–≤—Ç–æ—Ä, count AS –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ FROM book JOIN author ON book.author_id = author.author_id WHERE count > 0 ORDER BY book_id ASC");
    } else if(nameGenre.size() > 0 and nameAuthor.size() > 0) {
        query.prepare("SELECT book_id, title AS –ù–∞–∑–≤–∞–Ω–∏–µ, genre AS –ñ–∞–Ω—Ä, name_author AS –ê–≤—Ç–æ—Ä, count AS –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ FROM book JOIN author ON book.author_id = author.author_id WHERE count > 0 AND name_author = :nameAuthor AND genre = :nameGenre ORDER BY book_id, name_author, genre ASC");
        query.bindValue(":nameAuthor", nameAuthor);
        query.bindValue(":nameGenre", nameGenre);
    } else {
        query.prepare("SELECT book_id, title AS –ù–∞–∑–≤–∞–Ω–∏–µ, genre AS –ñ–∞–Ω—Ä, name_author AS –ê–≤—Ç–æ—Ä, count AS –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ FROM book JOIN author ON book.author_id = author.author_id WHERE count > 0 AND name_author = :nameAuthor OR genre = :nameGenre ORDER BY book_id, name_author, genre ASC");
        query.bindValue(":nameAuthor", nameAuthor);
        query.bindValue(":nameGenre", nameGenre);
    }


    if (!query.exec()) {
        QMessageBox::information(this, "–£–ü–°..","–¢–∞–∫–æ–π –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ(");
        return;
    }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
    int columnCount = query.record().count();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    QStringList headers;
    for (int i = 0; i < columnCount; ++i) {
        headers.append(query.record().fieldName(i));
    }
    headers.append("");
    headers.append("");
    ui -> tableWidget ->setColumnCount(columnCount+2);
    ui -> tableWidget ->setHorizontalHeaderLabels(headers);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
    int rowIndex = 0;
    while (query.next()) {
        ui -> tableWidget ->insertRow(rowIndex);
        for (int colIndex = 0; colIndex < columnCount; ++colIndex) {
            QVariant value = query.value(colIndex);
            QTableWidgetItem *twi = new QTableWidgetItem();
            twi -> setText(value.toString());
            twi->setFlags(twi->flags()&0xfffffffd);
            ui -> tableWidget ->setItem(rowIndex, colIndex, twi);
        }
        QPushButton *buy = new QPushButton();
        buy -> setText("–í–∑—è—Ç—å");
        buy -> setProperty("row", rowIndex);
        connect(buy, SIGNAL(clicked()), this, SLOT(buy_click()));
        ui -> tableWidget ->setCellWidget(rowIndex, columnCount, buy);

        QPushButton *like = new QPushButton();
        like -> setText("ü©∑");
        like -> setProperty("row", rowIndex);
        connect(like, SIGNAL(clicked()), this, SLOT(like_click()));
        ui -> tableWidget ->setCellWidget(rowIndex, columnCount+1, like);
        rowIndex++;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    ui -> tableWidget ->resizeColumnsToContents();
}


void MainWindow::on_pushButton_allUser_clicked() //–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
{
    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö
    ui -> tableWidget ->clear();
    ui->tableWidget->setRowCount(0);
    ui->tableWidget->setColumnCount(0);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'book'
    QSqlQuery query;
    query.prepare("SELECT client_id AS ID, name AS –ò–º—è, familia AS –§–∞–º–∏–ª–∏—è, mail AS –ü–æ—á—Ç–∞, city AS –ì–æ—Ä–æ–¥ FROM client");

    if (!query.exec()) {
        qDebug() << "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:" << query.lastError().text();
        return;
    }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
    int columnCount = query.record().count();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    QStringList headers;
    for (int i = 0; i < columnCount; ++i) {
        headers.append(query.record().fieldName(i));
    }
    headers.append("");

    ui -> tableWidget ->setColumnCount(columnCount+1);
    ui -> tableWidget ->setHorizontalHeaderLabels(headers);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
    int rowIndex = 0;
    while (query.next()) {
        ui -> tableWidget ->insertRow(rowIndex);
        for (int colIndex = 0; colIndex < columnCount; ++colIndex) {
            QVariant value = query.value(colIndex);
            QTableWidgetItem *twi = new QTableWidgetItem();
            twi -> setText(value.toString());
            twi->setFlags(twi->flags()&0xfffffffd);
            ui -> tableWidget ->setItem(rowIndex, colIndex, twi);
        }
        QPushButton *buy = new QPushButton();
        buy -> setText("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å");
        buy -> setProperty("row", rowIndex);
        connect(buy, SIGNAL(clicked()), this, SLOT(block()));
        ui -> tableWidget ->setCellWidget(rowIndex, columnCount, buy);
        rowIndex++;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    ui -> tableWidget ->resizeColumnsToContents();
    ui -> tableWidget -> horizontalHeader() -> setSectionResizeMode(QHeaderView::Stretch); //—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
}

void MainWindow::block() //–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
{
    QPushButton * pb = qobject_cast<QPushButton *>(sender());
    int row = pb->property("row").toInt();

    QString client_id = ui -> tableWidget -> item(row, 0) -> text();

    QSqlQuery deleteQuery(db);
    deleteQuery.prepare("DELETE FROM client WHERE client_id = :client_id");
    deleteQuery.bindValue(":client_id", client_id);

    if (!deleteQuery.exec()) {
        qDebug() << "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏:" << deleteQuery.lastError().text();
    } else {
        qDebug() << "–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.";
        on_pushButton_allUser_clicked();
    }
}

void MainWindow::on_pushButton_allRent_clicked() //–≤—Å–µ –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
{
    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö
    ui -> tableWidget ->clear();
    ui->tableWidget->setRowCount(0);
    ui->tableWidget->setColumnCount(0);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'book'
    QSqlQuery query;
    query.prepare("SELECT book.book_id, client.name AS –ò–º—è, client.familia AS –§–∞–º–∏–ª–∏—è, title AS –ù–∞–∑–≤–∞–Ω–∏–µ, genre AS –ñ–∞–Ω—Ä, name_author AS –ê–≤—Ç–æ—Ä FROM book  JOIN author ON book.author_id = author.author_id JOIN buy_book ON buy_book.book_id = book.book_id JOIN client ON buy_book.client_id = client.client_id");

    if (!query.exec()) {
        qDebug() << "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:" << query.lastError().text();
        return;
    }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
    int columnCount = query.record().count();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    QStringList headers;
    for (int i = 0; i < columnCount; ++i) {
        headers.append(query.record().fieldName(i));
    }
    headers.append("");
    ui -> tableWidget ->setColumnCount(columnCount+1);
    ui -> tableWidget ->setHorizontalHeaderLabels(headers);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
    int rowIndex = 0;
    while (query.next()) {
        ui -> tableWidget ->insertRow(rowIndex);
        for (int colIndex = 0; colIndex < columnCount; ++colIndex) {
            QVariant value = query.value(colIndex);
            QTableWidgetItem *twi = new QTableWidgetItem();
            twi -> setText(value.toString());
            twi->setFlags(twi->flags()&0xfffffffd);
            ui -> tableWidget ->setItem(rowIndex, colIndex, twi);
        }
        QPushButton *pick = new QPushButton();
        pick -> setText("–ó–∞–±—Ä–∞—Ç—å");
        pick -> setProperty("row", rowIndex);
        connect(pick, SIGNAL(clicked()), this, SLOT(pick_click()));
        ui -> tableWidget ->setCellWidget(rowIndex, columnCount, pick);
        rowIndex++;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    ui -> tableWidget ->resizeColumnsToContents();
    ui -> tableWidget -> horizontalHeader() -> setSectionResizeMode(QHeaderView::Stretch); //—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
}

void MainWindow::pick_click() //–∑–∞–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É
{
    QPushButton * pb = qobject_cast<QPushButton *>(sender());
    int row = pb->property("row").toInt();

    QString book_id = ui -> tableWidget -> item(row, 0) -> text();

    QSqlQuery deleteQuery(db);
    deleteQuery.prepare("DELETE FROM buy_book WHERE book_id = :book_id");
    deleteQuery.bindValue(":book_id", book_id);

    if (!deleteQuery.exec()) {
        qDebug() << "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏:" << deleteQuery.lastError().text();
    } else {
        qDebug() << "–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.";
        QSqlQuery updateQuery(db);
        updateQuery.prepare("UPDATE book SET count = count + 1 WHERE book_id = :book_id");
        updateQuery.bindValue(":book_id", book_id);

        if (!updateQuery.exec()) {
            QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î: " + updateQuery.lastError().text());
            return;
        }
        on_pushButton_allRent_clicked();
    }
}
